as.Date("22-May-1999", format="%d-%b-%Y")
foo <- data.frame(conc=rnorm(90),element=rep(c("N","P","K"),each=30),
trial=rep(c("Trial_A","Trial_B"),times=45))
stripplot(conc~element|trial,data=foo)
??stripplot
require(xyplot)
require(lattice)
stripplot(conc~element|trial,data=foo)
View(foo)
stripplot(conc~trial|element,data=foo)
stripplot(conc~element,data=foo)
?stripplot
as.numeric(factor(foo$trial))
stripplot(conc~element,data=foo,pch=as.numeric(factor(trial)))
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)))
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)),cex=2)
stripplot(conc~element|trial,data=foo)
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)))
View(foo)
stripplot(conc,data=foo)
stripplot(foo$conc)
stripplot(foo$conc,pch=as.numeric(factor(foo$element)),col=as.numeric(factor(foo$trial)))
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)))
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)),col="black")
stripplot(conc~element,data=foo,pch=as.numeric(factor(foo$trial)),col="black",cex=2)
setwd("~/Dropbox/Sandbox/panoramix")
rm(list=ls())
source("code/cleanAsia.R") # Loads libraries, cleans data (15 seconds)
source("code/functions.R")
beta.hat<- list()
tau.1<-list()
for(i in 1:J){
unit.lm <- lm(tau.n ~ n.n, data = data3[data3$j==i,] )
beta.hat[i] <- coef(unit.lm)[2]
tau.1[i] <- coef(unit.lm)[1]
}
for(i in 1:J){
unit.lm <- lm(tau.n ~ n.n, data = data2[data2$j==i,] )
beta.hat[i] <- coef(unit.lm)[2]
tau.1[i] <- coef(unit.lm)[1]
}
beta.hat<- -as.numeric(beta.hat)
tau.1<-10^as.numeric(tau.1)
options(scipen=2)
tauPlot(tau.1,beta.hat)
e<-lm(beta.hat ~ log10(tau.1))
summary(e)
?sample_n
name<-as.vector(unique(data$conflict_name))
name<-as.vector(unique(data2$conflict_name))
is<-sample_n(name,1/3*length(name), replace=FALSE)
library(dplyr)
is<-sample_n(name,1/3*length(name), replace=FALSE)
names(data2)
table(data2$j)
is<-sample_n(data2$j,1/3*length(unique(data2$j)), replace=FALSE)
is<-sample(data2$j,1/3*length(unique(data2$j)), replace=FALSE)
name<-as.vector(unique(data2$conflict_name))
is<-sample(name,1/3*length(name), replace=FALSE)
samp<-data2[data2$conflict_name %in% is,]
J<-length(is)
samp$n<-as.numeric(factor(samp$conflict_name))
sumamry(samp$n)
summary(samp$n)
beta.hat<- list()
tau.1<-list()
beta.hat<- list()
tau.1<-list()
for(i in 1:J){
unit.lm <- lm(tau.n ~ n.n, data = samp[samp$j==i,] )
beta.hat[i] <- coef(unit.lm)[2]
tau.1[i] <- coef(unit.lm)[1]
}
for(i in 1:J){
unit.lm <- lm(tau.n ~ n.n, data = samp[samp$n==i,] )
beta.hat[i] <- coef(unit.lm)[2]
tau.1[i] <- coef(unit.lm)[1]
}
fit<-lm(beta.hat ~ log10(tau.1))
beta.hat<- -as.numeric(beta.hat)
tau.1<-10^as.numeric(tau.1)
fit<-lm(beta.hat ~ log10(tau.1))
options(scipen=2)
tauPlot(tau.1,beta.hat)
summary(fit)
names<-sample(unique(data2$conflict_name),
1/3*length(unique(data2$conflict_name)),replace=FALSE)
names<-sample(unique(data2$conflict_name),
1/3*length(unique(data2$conflict_name)),replace=FALSE)
is<-data2[data2$conflict_name %in% names,]
ous<-data2[!(data2$ConflictName %in% is$ConflictName),]
names<-sample(unique(data2$conflict_name),
1/3*length(unique(data2$conflict_name)),replace=FALSE)
is<-data2[data2$conflict_name %in% names,]
ous<-data2[!(data2$conflcit_name %in% is$conflict_name),]
ous<-data2[!(data2$conflict_name %in% is$conflict_name),]
45567-32660
is$j<-as.numeric(factor(is$conflict_name))
I<-length(unique(is$j))
ous$j<-as.numeric(factor(ous$conflict_name))
O<-length(unique(ous$j))
beta.is<- list()
tau.is<-list()
beta.is<- list()
tau.is<-list()
beta.ous<- list()
tau.ous<-list()
for(i in 1:I){
unit.lm <- lm(tau.n ~ n.n, data = is[is$j==i,] )
beta.is[i] <- coef(unit.lm)[2]
tau.is[i] <- coef(unit.lm)[1]
}
beta.is<- -as.numeric(beta.is)
tau.is<-10^as.numeric(tau.is)
View(ous)
data2<-df[df$where_prec<=4 & df$adm_1!="",] # N=45639
## Calculate time between events for each conflict
data2<-data2[order(data2$conflict_name,data2$date_start),]
# Lead
data2<-slide(data2,Var="date_start",GroupVar="conflict_name",
NewVar="next_event",slideBy=1)
data2$tau<-as.integer(as.Date(as.character(data2$next_event), format="%Y-%m-%d")-
as.Date(as.character(data2$date_start), format="%Y-%m-%d"))
data2<-data2[data2$tau>0,]
data2<-na.omit(data2) # N=45567
setwd("~/Dropbox/Sandbox/panoramix")
library(countrycode)
library(DataCombine)
library(devtools)
library(poweRlaw)
library(scales)
## Load data (large file)
ged<-read.csv("raw_data/ged20.csv",
sep=",",header=TRUE,row.names=NULL,stringsAsFactors=FALSE)
setwd("~/Dropbox/Sandbox/panoramix")
library(countrycode)
library(DataCombine)
library(devtools)
library(poweRlaw)
library(scales)
library(dplyr)
library(poweRlaw)
library(scales)
ged<-read.csv("raw_data/ged20.csv",
sep=",",header=TRUE,row.names=NULL,stringsAsFactors=FALSE)
df<-ged[ged$event_clarity==1 & ged$best_est>0,]
df$ccode<-countrycode(df$country,"country.name","iso2c",warn=TRUE)
df$continent<-countrycode(df$ccode,"iso2c","continent",warn=TRUE)
df$region<-countrycode(df$ccode,"iso2c","region",warn=TRUE)
df<-df[df$continent=="Asia",] # N=48476
df<-df[df$ccode!="BT" & df$ccode!="SA" & df$ccode!="SY",] # N=48460
df<-df[order(df$country,df$date_end),]
freq<-data.frame(table(df$conflict_name))
freq$excl<-as.numeric(freq$Freq<=34)
colnames(freq)[1]<-"conflict_name"
df<-merge(df,freq,all.x=TRUE)
df<-df[df$excl==0,] # N=47375
df$start<-as.Date(as.character(df$date_start), format="%Y-%m-%d")
df$ISAF<-0
df[df$conflict_name=="Afghanistan:Government",]$ISAF<-as.numeric(
df[df$conflict_name=="Afghanistan:Government",]$start>="2001-10-07")
df[df$ISAF==1,]$conflict_name<-"Afghanistan:Government (ISAF)"
data<-split(df$best_est,df$conflict_name) # 72 conflicts
conflict<-names(data)
l<-as.vector(do.call(rbind, lapply(data, length)))
N<-length(data)
pl<-list()
xmin<-vector(mode="numeric", length=0)
alpha<-vector(mode="numeric", length=0)
ntail<-vector(mode="numeric", length=0)
p<-vector(mode="numeric", length=0)
data2<-df[df$where_prec<=4 & df$adm_1!="",] # N=45639
data2<-data2[order(data2$conflict_name,data2$date_start),]
data2<-slide(data2,Var="date_start",GroupVar="conflict_name",
NewVar="next_event",slideBy=1)
data2$tau<-as.integer(as.Date(as.character(data2$next_event), format="%Y-%m-%d")-
as.Date(as.character(data2$date_start), format="%Y-%m-%d"))
data2<-na.omit(data2) # N=45567
data2<-data2[data2$tau>0,]
data2$i<-seq.int(nrow(data2))
data2$n<-as.integer(with(data2,ave(i, conflict_name, # Event number
FUN = function(x) cumsum(!duplicated(x)))))
data2$j<-as.numeric(factor(data2$conflict_name)) # Province indicator
J<-max(as.vector(unique(data2$j)))
# log10 scale for event number and time between events
data2$n.n<-log10(data2$n)
data2$tau.n<-log10(data2$tau)
beta.hat<- list()
tau.1<-list()
for(i in 1:J){
unit.lm <- lm(tau.n ~ n.n, data = data2[data2$j==i,] )
beta.hat[i] <- coef(unit.lm)[2]
tau.1[i] <- coef(unit.lm)[1]
}
beta.hat<- -as.numeric(beta.hat)
tau.1<-10^as.numeric(tau.1)
options(scipen=2)
tauPlot(tau.1,beta.hat)
source("code/functions.R")
tauPlot(tau.1,beta.hat)
?ceiling
names<-sample(unique(data2$conflict_name),
1/3*length(unique(data2$conflict_name)),replace=FALSE)
is<-data2[data2$conflict_name %in% names,]
ous<-data2[!(data2$conflict_name %in% is$conflict_name),]
View(is)
View(ous)
is$i<-as.numeric(factor(is$conflict_name))
I<-length(unique(is$i))
ous$o<-as.numeric(factor(ous$conflict_name))
O<-length(unique(ous$o))
beta.is<- list()
tau.is<-list()
beta.ous<- list()
tau.ous<-list()
for(i in 1:I){
unit.lm <- lm(tau.n ~ n.n, data = is[is$j==i,] )
beta.is[i] <- coef(unit.lm)[2]
tau.is[i] <- coef(unit.lm)[1]
}
beta.is<- -as.numeric(beta.is)
tau.is<-10^as.numeric(tau.is)
fit<-lm(beta.hat ~ log10(tau.1))
for(i in 1:I){
unit.lm <- lm(tau.n ~ n.n, data = is[is$i==i,] )
beta.is[i] <- coef(unit.lm)[2]
tau.is[i] <- coef(unit.lm)[1]
}
beta.is<- -as.numeric(beta.is)
tau.is<-10^as.numeric(tau.is)
fit<-lm(beta.hat ~ log10(tau.1))
summary(fit)
?predict.lm
names(ous)
tau1<-as.vector(ous[ous$n==1,]$tau)
fit<-lm(beta.hat ~ log10(tau.1))
summary(fit)
test<-predict.lm(fit,tau1,se.fit=TRUE,type="response")
setwd("~/Dropbox/Glasnost/Publications/DPE2015")
setwd("~/Dropbox/Glasnost/Publications/DPE_2015")
library(maptools)
library(sp)
library(RColorBrewer)
library(classInt)
africa<-readShapeSpatial("raw_data/shp/africa.shp") # Check whether path is correct
data<-read.csv("tidy_data/map_data.csv",header=TRUE)
africa@data <- cbind(c(1:dim(africa)[1]),
africa@data[,c("ISO3","NAME","LAT","LON")])
names(africa@data) <- c("order",names(africa@data)[-1])
africadat<-merge(africa, data, by="ISO3")
brks<-classIntervals(africadat$onset,n=2,style="fixed",fixedBreaks=c(0,1,2,3,4,5,6,7),
unique=TRUE)
brks<-brks$brks
par(mar=c(1,1,1,1),family="serif")
spplot(africadat,"onset",at=brks,col.regions=brewer.pal(9,"Blues"),
scales=list(draw=TRUE), main="")
trellis.par.set(axis.line=list(col=NA))
spplot(africadat,"onset",at=brks,col.regions=brewer.pal(9,"Blues"),
scales=list(draw=TRUE), main="")
spplot(africadat,"onset",at=brks,col.regions=brewer.pal(9,"Blues"),
scales=list(draw=TRUE), main="",par.settings=list(axis.text=list(cex=3)))
trellis.par.set(axis.line=list(col=NA))
names(africadat)
trellis.par.set(axis.line=list(col=NA))
spplot(africadat,zcol="onset",col.regions=colorRampPalette(c("white","grey10"))(20),
main="",pretty=T,par.settings=list(axis.text=list(cex=3)))
names(data)
africa<-readShapeSpatial("raw_data/shp/africa.shp")
data<-read.csv("tidy_data/map_data.csv",header=TRUE)
data$onset
names(africa)
africa$NAME
names(data)
data<-data[order(data$country),]
data$onset
africa$onset<-c(3,0,0,1,3,1,0,3,4,2,
3,1,1,2,0,3,1,0,1,2,
1,1,1,1,2,0,0,3,1,0,
0,0,4,2,3,0,6,1,3,0,
1,0,0,1,1,0,0)
par(mar=c(1,1,1,1),family="serif")
trellis.par.set(axis.line=list(col=NA))
spplot(africadat,zcol="onset",col.regions=colorRampPalette(c("white","grey10"))(20),
main="",pretty=T,par.settings=list(axis.text=list(cex=3)))
spplot(africa,zcol="onset",col.regions=colorRampPalette(c("white","grey10"))(20),
main="",pretty=T,par.settings=list(axis.text=list(cex=3)))
names(data)
data$country
a<-as.vector(data$country)
b<-as.vector(africa$NAME)
a
b
names(africa)
africa<-readShapeSpatial("raw_data/shp/africa.shp")
names(data)
test<-marge(africa,data)
test<-merge(africa,data)
test$onset
africa<-readShapeSpatial("raw_data/shp/africa.shp")
africa$onset<-c(3,0,3,1,3,1,4,2,3,0,
2,0,3,1,1,0,2,1,1,1,
2,0,3,0,1,0,0,4,2,1,
3,0,1,0,6,1,3,1,1,0,
0,1,1,0,0,0,0)
par(mar=c(1,1,1,1),family="serif")
trellis.par.set(axis.line=list(col=NA))
spplot(africa,zcol="onset",col.regions=colorRampPalette(c("white","grey10"))(20),
main="",pretty=T,par.settings=list(axis.text=list(cex=3)))
